term(5)                             File Formats Manual                            term(5)

[1mNAME[0m
       term - format of compiled term file.

[1mSYNOPSIS[0m
       [1mterm[0m

[1mDESCRIPTION[0m
   [1mSTORAGE LOCATION[0m
       Compiled  terminfo descriptions are placed under the directory [1m/usr/share/terminfo[22m.
       Two configurations are supported (when building the [1mncurses [22mlibraries):

       [1mdirectory tree[0m
            A two-level scheme is used to avoid a linear search  of  a  huge  UNIX  system
            directory:  [1m/usr/share/terminfo/c/name [22mwhere [4mname[24m is the name of the terminal,
            and [4mc[24m is the first character of [4mname[24m.  Thus, [4mact4[24m can be  found  in  the  file
            [1m/usr/share/terminfo/a/act4[22m.  Synonyms for the same terminal are implemented by
            multiple links to the same compiled file.

       [1mhashed database[0m
            Using Berkeley database, two types of records are stored: the terminfo data in
            the same format as stored in a directory tree with the terminfo's primary name
            as a key, and records containing only aliases pointing to the primary name.

            If built to write hashed databases, [1mncurses [22mcan still read terminfo  databases
            organized  as  a  directory  tree, but cannot write entries into the directory
            tree.  It can write (or rewrite) entries in the hashed database.

            [1mncurses [22mdistinguishes the two cases in the TERMINFO and TERMINFO_DIRS environ‚Äê
            ment  variable  by assuming a directory tree for entries that correspond to an
            existing directory, and hashed database otherwise.

   [1mLEGACY STORAGE FORMAT[0m
       The format has been chosen so that it will be the same on all hardware.   An  8  or
       more  bit byte is assumed, but no assumptions about byte ordering or sign extension
       are made.

       The compiled file is created  with  the  [1mtic  [22mprogram,  and  read  by  the  routine
       [1msetupterm[22m(3X).   The  file  is  divided into six parts: the header, terminal names,
       boolean flags, numbers, strings, and string table.

       The header section begins the file.  This section contains six  short  integers  in
       the format described below.  These integers are

            (1) the magic number (octal 0432);

            (2) the size, in bytes, of the names section;

            (3) the number of bytes in the boolean section;

            (4) the number of short integers in the numbers section;

            (5) the number of offsets (short integers) in the strings section;

            (6) the size, in bytes, of the string table.

       Short  integers  are  stored in two 8-bit bytes.  The first byte contains the least
       significant 8 bits of the value, and the second byte contains the most  significant
       8 bits.  (Thus, the value represented is 256*second+first.)  The value -1 is repre‚Äê
       sented by the two bytes 0377, 0377; other negative values are illegal.  This  value
       generally  means  that  the corresponding capability is missing from this terminal.
       Note that this format corresponds to the hardware of the VAX and PDP-11  (that  is,
       little-endian  machines).   Machines where this does not correspond to the hardware
       must read the integers as two bytes and compute the little-endian value.

       The terminal names section comes next.  It contains the first line of the  terminfo
       description, listing the various names for the terminal, separated by the ‚Äú|‚Äù char‚Äê
       acter.  The section is terminated with an ASCII NUL character.

       The boolean flags have one byte for each flag.  This byte is either 0 or 1  as  the
       flag  is  present  or  absent.   The capabilities are in the same order as the file
       <term.h>.

       Between the boolean section and the number section, a null byte will  be  inserted,
       if  necessary,  to ensure that the number section begins on an even byte (this is a
       relic of the PDP-11's word-addressed architecture, originally designed in to  avoid
       IOT  traps  induced by addressing a word on an odd byte boundary).  All short inte‚Äê
       gers are aligned on a short word boundary.

       The numbers section is similar to the flags section.  Each capability takes up  two
       bytes, and is stored as a little-endian short integer.  If the value represented is
       -1, the capability is taken to be missing.

       The strings section is also similar.  Each capability is stored as a short integer,
       in  the  format  above.  A value of -1 means the capability is missing.  Otherwise,
       the value is taken as an offset from the beginning of the  string  table.   Special
       characters  in  ^X  or  \c  notation  are stored in their interpreted form, not the
       printing representation.  Padding information $<nn> and  parameter  information  %x
       are stored intact in uninterpreted form.

       The  final section is the string table.  It contains all the values of string capa‚Äê
       bilities referenced in the string section.  Each string is null terminated.

   [1mEXTENDED STORAGE FORMAT[0m
       The previous section describes the conventional terminfo binary format.  With  some
       minor  variations  of the offsets (see PORTABILITY), the same binary format is used
       in all modern UNIX systems.  Each system uses a predefined set of  boolean,  number
       or string capabilities.

       The  [1mncurses  [22mlibraries  and  applications support extended terminfo binary format,
       allowing users to define capabilities which are loaded at runtime.  This  extension
       is  made possible by using the fact that the other implementations stop reading the
       terminfo data when they have reached the end of  the  size  given  in  the  header.
       [1mncurses [22mchecks the size, and if it exceeds that due to the predefined data, contin‚Äê
       ues to parse according to its own scheme.

       First, it reads the extended header (5 short integers):

            (1)  count of extended boolean capabilities

            (2)  count of extended numeric capabilities

            (3)  count of extended string capabilities

            (4)  count of the items in extended string table

            (5)  size of the extended string table in bytes

       The count- and size-values for the extended string table include the extended capa‚Äê
       bility [4mnames[24m as well as extended capability [4mvalues[24m.

       Using  the  counts  and  sizes,  [1mncurses  [22mallocates  arrays  and reads data for the
       extended capabilities in the same order as the header information.

       The extended string table contains values for string capabilities.  After  the  end
       of  these  values,  it  contains the names for each of the extended capabilities in
       order, e.g., booleans, then numbers and finally strings.

       Applications which manipulate terminal data can use the  definitions  described  in
       [1mterm_variables[22m(3X)  which  associate  the  long  capability names with members of a
       [1mTERMTYPE [22mstructure.

   [1mEXTENDED NUMBER FORMAT[0m
       On occasion, 16-bit signed integers are not large enough.  With [1mncurses [22m6.1, a  new
       format was introduced by making a few changes to the legacy format:

       ¬∑   a different magic number (0542)

       ¬∑   changing  the  type  for the [4mnumber[24m array from signed 16-bit integers to signed
           32-bit integers.

       To maintain compatibility, the library presents the same data structures to  direct
       users  of the [1mTERMTYPE [22mstructure as in previous formats.  However, that cannot pro‚Äê
       vide callers with the extended numbers.  The library uses a similar but hidden data
       structure [1mTERMTYPE2 [22mto provide data for the terminfo functions.

[1mPORTABILITY[0m
       Note  that  it  is possible for [1msetupterm [22mto expect a different set of capabilities
       than are actually present in the file.  Either the database may have  been  updated
       since [1msetupterm [22mhas been recompiled (resulting in extra unrecognized entries in the
       file) or the program may have been recompiled more recently than the  database  was
       updated (resulting in missing entries).  The routine [1msetupterm [22mmust be prepared for
       both possibilities - this is why the numbers and sizes  are  included.   Also,  new
       capabilities  must  always be added at the end of the lists of boolean, number, and
       string capabilities.

       Despite the consistent use of little-endian for numbers  and  the  otherwise  self-
       describing  format,  it  is  not  wise  to  count on portability of binary terminfo
       entries between commercial UNIX versions.  The problem is that there are  at  least
       three versions of terminfo (under HP-UX, AIX, and OSF/1) which diverged from System
       V terminfo after SVr1, and have added extension capabilities to  the  string  table
       that  (in  the binary format) collide with System V and XSI Curses extensions.  See
       [1mterminfo[22m(5) for detailed discussion of terminfo source compatibility issues.

       Direct access to the [1mTERMTYPE [22mstructure is provided for legacy applications.   Por‚Äê
       table  applications  should  use  the  [1mtigetflag [22mand related functions described in
       [1mcurs_terminfo[22m(3X) for reading terminal capabilities.

       A small number of terminal descriptions use uppercase characters  in  their  names.
       If  the  underlying  filesystem ignores the difference between uppercase and lower‚Äê
       case, [1mncurses [22mrepresents the ‚Äúfirst character‚Äù of the terminal  name  used  as  the
       intermediate level of a directory tree in (two-character) hexadecimal form.

[1mEXAMPLE[0m
       As  an  example, here is a description for the Lear-Siegler ADM-3, a popular though
       rather stupid early terminal:

           adm3a|lsi adm3a,
                   am,
                   cols#80, lines#24,
                   bel=^G, clear= 32$<1>, cr=^M, cub1=^H, cud1=^J,
                   cuf1=^L, cup=\E=%p1%{32}%+%c%p2%{32}%+%c, cuu1=^K,
                   home=^^, ind=^J,

       and a hexadecimal dump of the compiled terminal description:

           0000  1a 01 10 00 02 00 03 00  82 00 31 00 61 64 6d 33  ........ ..1.adm3
           0010  61 7c 6c 73 69 20 61 64  6d 33 61 00 00 01 50 00  a|lsi ad m3a...P.
           0020  ff ff 18 00 ff ff 00 00  02 00 ff ff ff ff 04 00  ........ ........
           0030  ff ff ff ff ff ff ff ff  0a 00 25 00 27 00 ff ff  ........ ..%.'...
           0040  29 00 ff ff ff ff 2b 00  ff ff 2d 00 ff ff ff ff  ).....+. ..-.....
           0050  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0060  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0070  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0080  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0090  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00a0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00b0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00c0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00d0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00e0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00f0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0100  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0110  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0120  ff ff ff ff ff ff 2f 00  07 00 0d 00 1a 24 3c 31  ....../. .....$<1
           0130  3e 00 1b 3d 25 70 31 25  7b 33 32 7d 25 2b 25 63  >..=%p1% {32}%+%c
           0140  25 70 32 25 7b 33 32 7d  25 2b 25 63 00 0a 00 1e  %p2%{32} %+%c....
           0150  00 08 00 0c 00 0b 00 0a  00                       ........ .

[1mLIMITS[0m
       Some limitations:

       ¬∑   total compiled entries cannot exceed 4096 bytes in the legacy format.

       ¬∑   total compiled entries cannot exceed 32768 bytes in the extended format.

       ¬∑   the name field cannot exceed 128 bytes.

[1mFILES[0m
       /usr/share/terminfo/*/*  compiled terminal capability data base

[1mSEE ALSO[0m
       [1mcurses[22m(3X), [1mterminfo[22m(5).

[1mAUTHORS[0m
       Thomas E. Dickey
       extended terminfo format for ncurses 5.0
       hashed database support for ncurses 5.6
       extended number support for ncurses 6.1

       Eric S. Raymond
       documented legacy terminfo format, e.g., from pcurses.

                                                                                   term(5)
